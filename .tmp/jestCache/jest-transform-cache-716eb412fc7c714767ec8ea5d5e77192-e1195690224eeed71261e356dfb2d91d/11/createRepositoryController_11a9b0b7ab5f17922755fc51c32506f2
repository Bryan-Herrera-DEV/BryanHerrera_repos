11d79fc25f795b8397c00e2482aa16cf
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateRepositoryController = void 0;
const repository_entitie_1 = require("../../entities/repository.entitie");
const tribe_entitie_1 = require("../../entities/tribe.entitie");
const http_status_1 = __importDefault(require("http-status"));
class CreateRepositoryController {
    run(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { id_tribe, name, state, status } = req.body;
                const data = yield tribe_entitie_1.Tribe.findOneBy({
                    id_tribe: parseInt(id_tribe),
                });
                if (!data) {
                    res.status(http_status_1.default.NOT_FOUND).json({
                        status: "error",
                        message: "Tribu no encontrada",
                    });
                }
                else {
                    const repo = new repository_entitie_1.Repository();
                    if (name !== undefined &&
                        name !== null &&
                        status !== undefined &&
                        status !== undefined) {
                        repo.id_tribe = id_tribe;
                        repo.name = name;
                        repo.state = state;
                        repo.create_time = new Date();
                        repo.status = status;
                        yield repo.save();
                        res.status(http_status_1.default.CREATED).json({
                            status: "success",
                            message: "Repositorio creada con Ã©xito",
                            data: repo,
                        });
                    }
                    else {
                        res.status(http_status_1.default.BAD_REQUEST).json({
                            status: "error",
                            message: "Faltan datos",
                        });
                    }
                }
            }
            catch (error) {
                res.status(http_status_1.default.INTERNAL_SERVER_ERROR).json({
                    status: "error",
                    message: "Error al crear el repositorio",
                    data: error,
                });
            }
        });
    }
}
exports.CreateRepositoryController = CreateRepositoryController;
