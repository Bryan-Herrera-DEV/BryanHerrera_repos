[["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\tests\\prueba.test.ts",{"fileContent":"import { resolve } from \"path\";\r\nimport { config } from \"dotenv\";\r\nconfig({ path: resolve(__dirname, \"../.env\") });\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst supertest = require('supertest');\r\nimport { AppBackend } from '../src/app/AppBackend';\r\n\r\nconst app = supertest(new AppBackend().start());\r\n\r\n// prueba sobre /organization\r\ntest('Prueba de prueba', async () => {\r\n  await app.get('/organization')\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n\r\n})\r\n\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/AppBackend.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/server.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\AppBackend.ts",{"fileContent":"import { Server } from \"./server\";\r\nexport class AppBackend {\r\n  server?: Server;\r\n\r\n  async start() {\r\n    const port = process.env.PORT || '5000';\r\n    this.server = new Server(port);\r\n    await this.server.db_connection();\r\n    await this.server.listen();\r\n  }\r\n\r\n  get httpServer() {\r\n    return this.server?.getHTTPServer();\r\n  }\r\n\r\n  async stop() {\r\n    return this.server?.stop();\r\n  }\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/server.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/routes/index.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/configs/EnvGuardsVariables.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/configs/db.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\server.ts",{"fileContent":"import {json, urlencoded} from 'body-parser'\r\nimport compress from 'compression';\r\nimport morgan from \"morgan\";\r\nimport errorHandler from 'errorhandler';\r\nimport express, { Request, Response } from 'express';\r\nimport Router from 'express-promise-router';\r\nimport helmet from 'helmet';\r\nimport * as http from 'http';\r\nimport httpStatus from 'http-status';\r\nimport { registerRoutes } from './routes';\r\nimport { NODE_ENV, DATABASE_NAME } from './configs/EnvGuardsVariables';\r\nimport { AppDataSource } from \"./configs/db\";\r\n\r\nexport class Server {\r\n  private express: express.Express;\r\n  private port: string;\r\n  private httpServer?: http.Server;\r\n  constructor(port: string) {\r\n\r\n    this.port = port;\r\n    this.express = express();\r\n    this.express.use(morgan('dev'));\r\n    this.express.use(json());\r\n    this.express.use(urlencoded({ extended: true }));\r\n    this.express.use(helmet.xssFilter());\r\n    this.express.use(helmet.noSniff());\r\n    this.express.use(helmet.hidePoweredBy());\r\n    this.express.use(helmet.frameguard({ action: 'deny' }));\r\n    this.express.use(compress());\r\n\r\n    const router = Router();\r\n    router.use(errorHandler());\r\n    this.express.use(router);\r\n\r\n    registerRoutes(router);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/ban-types\r\n    router.use((err: Error, req: Request, res: Response, _next: Function) => {\r\n      res.status(httpStatus.INTERNAL_SERVER_ERROR).send(err.message);\r\n    });\r\n  }\r\n\r\n  async db_connection(): Promise<void>{\r\n    return new Promise((resolve) => {\r\n      AppDataSource.initialize()\r\n      .then(() => {\r\n        console.log(`[+] URL BASE DE DATOS: ${DATABASE_NAME}`);\r\n        resolve();\r\n      })\r\n      .catch(error => console.log(error))\r\n    })\r\n  }\r\n\r\n  async listen(): Promise<void>{\r\n      return new Promise((resolve) => {\r\n      this.httpServer = this.express.listen(this.port, () => {\r\n        console.log(`[+] Server corriendo en http://localhost:${this.port} en modo ${NODE_ENV}`);\r\n      });\r\n      resolve();\r\n    })\r\n  }\r\n\r\n  getHTTPServer() {\r\n    return this.httpServer;\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.httpServer) {\r\n        this.httpServer.close(error => {\r\n          if (error) {\r\n            return reject(error);\r\n          }\r\n          return resolve();\r\n        });\r\n      }\r\n      return resolve();\r\n    });\r\n  }\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/routes/index.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/configs/EnvGuardsVariables.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/configs/db.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/configs/guards/EnvGuards.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\routes\\index.ts",{"fileContent":"import { Router } from 'express';\r\nimport glob from 'glob';\r\n\r\nexport function registerRoutes(router: Router) {\r\n  const routes = glob.sync(__dirname + '/**/*.route.*');\r\n  routes.map(route => register(route, router));\r\n}\r\n\r\nfunction register(routePath: string, router: Router) {\r\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n  const route = require(routePath);\r\n\r\n  route.register(router);\r\n}\r\n","resolvedModuleNames":[]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\configs\\EnvGuardsVariables.ts",{"fileContent":"import * as EnviromentGuard from \"./guards/EnvGuards\";\r\n\r\nexport const NODE_ENV = EnviromentGuard.NODE_ENV(process.env.NODE_ENV);\r\nexport const DATABASE_NAME = EnviromentGuard.DATABASE_URL(process.env.DATABASE_URL ?? \"\");\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/configs/guards/EnvGuards.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\configs\\guards\\EnvGuards.ts",{"fileContent":"type Enviroments = \"dev\" | \"prod\";\r\nexport const NODE_ENV = (nodeEnv: string | undefined): Enviroments => {\r\n  const environment: Enviroments[] = [\"dev\", \"prod\"];\r\n\r\n  if (!(environment as string[]).includes(nodeEnv ?? \"\")) {\r\n    throw new Error(`NODE_ENV debe ser uno de los siguientes ${environment}`);\r\n  }\r\n  return nodeEnv as Enviroments;\r\n};\r\n\r\nexport const DATABASE_URL = (databaseName: string): string => {\r\n  if (databaseName.trim() !== databaseName) {\r\n    throw new Error(\"process.env.DATABASE_URL es requerido\");\r\n  }\r\n  return databaseName;\r\n};\r\n","resolvedModuleNames":[]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\configs\\db.ts",{"fileContent":"import { DataSource } from 'typeorm';\r\nimport { URL } from 'url';\r\nimport { Organization } from '../entities/organization.entitie';\r\nimport { Tribe } from '../entities/tribe.entitie';\r\nimport { Repository } from '../entities/repository.entitie';\r\nimport { Metrics } from '../entities/metrics.entitie';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\nconst dbUrl = new URL(process.env.DATABASE_URL!);\r\nconst routingId = dbUrl.searchParams.get('options');\r\ndbUrl.searchParams.delete('options');\r\n\r\nexport const AppDataSource = new DataSource({\r\n\ttype: 'cockroachdb',\r\n\turl: dbUrl.toString(),\r\n\tssl: true,\r\n  entities: [Organization, Tribe, Repository, Metrics],\r\n  synchronize: true,\r\n\textra: {\r\n\t\toptions: routingId,\r\n\t},\r\n  logging: true,\r\n});\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\entities\\organization.entitie.ts",{"fileContent":"import { BaseEntity, Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\r\nimport { Tribe } from './tribe.entitie';\r\n\r\n@Entity()\r\nexport class Organization extends BaseEntity {\r\n  @PrimaryGeneratedColumn({ type: 'int' })\r\n  id_organization: number;\r\n\r\n  @Column({ type: 'varchar', length: 50 })\r\n  name: string;\r\n\r\n  @Column({ type: 'int' })\r\n  status: number;\r\n\r\n  @OneToMany(() => Tribe, (tribe) => tribe.id_organization)\r\n  tribes: Tribe[];\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\entities\\tribe.entitie.ts",{"fileContent":"import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  JoinColumn,\r\n  OneToMany,\r\n  ManyToOne,\r\n  BaseEntity,\r\n} from 'typeorm';\r\n\r\nimport { Organization } from './organization.entitie';\r\nimport { Repository } from './repository.entitie';\r\n\r\n@Entity()\r\nexport class Tribe extends BaseEntity {\r\n  @PrimaryGeneratedColumn()\r\n  id_tribe: number;\r\n\r\n  @Column({ type: 'varchar', length: 50 })\r\n  name: string;\r\n\r\n  @Column({ type: 'int' })\r\n  status: number;\r\n\r\n  @ManyToOne(() => Organization, (organization) => organization.tribes, {\r\n    eager: true,\r\n  })\r\n  @JoinColumn({ name: 'id_organization' })\r\n  id_organization: Organization;\r\n\r\n  @OneToMany(() => Repository, (repository) => repository.id_tribe)\r\n  repositories: Repository[];\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\entities\\repository.entitie.ts",{"fileContent":"import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  JoinColumn,\r\n  ManyToOne,\r\n  OneToOne,\r\n  BaseEntity,\r\n} from 'typeorm';\r\n\r\nimport { Metrics } from './metrics.entitie';\r\nimport { Tribe } from './tribe.entitie';\r\n\r\n@Entity()\r\nexport class Repository extends BaseEntity {\r\n  @PrimaryGeneratedColumn()\r\n  id_repository: number;\r\n\r\n  @Column({ type: 'varchar', length: 50 })\r\n  name: string;\r\n\r\n  @Column({ type: 'char', length: 1 })\r\n  state: string;\r\n\r\n  @Column({ type: 'timestamp' })\r\n  create_time: Date;\r\n\r\n  @Column({ type: 'char', length: 1 })\r\n  status: string;\r\n\r\n  @ManyToOne(() => Tribe, (tribe) => tribe.repositories)\r\n  @JoinColumn({ name: 'id_tribe' })\r\n  id_tribe: number;\r\n\r\n  @OneToOne(() => Metrics, (metrics) => metrics.id_repository, {\r\n    eager: true,\r\n  })\r\n  metrics: Metrics;\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\entities\\metrics.entitie.ts",{"fileContent":"import {\r\n  Entity,\r\n  Column,\r\n  OneToOne,\r\n  JoinColumn,\r\n  BaseEntity,\r\n  PrimaryColumn,\r\n} from 'typeorm';\r\n\r\nimport { Repository } from './repository.entitie';\r\n\r\n@Entity()\r\nexport class Metrics extends BaseEntity {\r\n  @PrimaryColumn()\r\n  @OneToOne(() => Repository)\r\n  @JoinColumn({ name: 'id_repository' })\r\n  id_repository: number;\r\n\r\n  @Column({ type: 'double precision' })\r\n  coverage: number;\r\n\r\n  @Column({ type: 'int' })\r\n  bugs: number;\r\n\r\n  @Column({ type: 'int' })\r\n  vulnerabilities: number;\r\n\r\n  @Column({ type: 'int' })\r\n  hotspot: number;\r\n\r\n  @Column({ type: 'int' })\r\n  code_smells: number;\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\routes\\metrics.route.ts",{"fileContent":"import { Request, Response, Router } from \"express\";\r\nimport { CreateMetricsController } from \"../controllers/metrics/createMetricsController\";\r\nimport { GetMetricsController } from \"../controllers/metrics/getMetricsController\";\r\n\r\n\r\n\r\nexport const register = (router: Router) => {\r\n  const getMetrics = new GetMetricsController();\r\n  const createMetrics = new CreateMetricsController();\r\n\r\n  router.get('/metrics', (req:Request, res: Response) => getMetrics.run(req, res));\r\n  router.post('/metrics', (req:Request, res: Response) => createMetrics.run(req, res));\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/metrics/createMetricsController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/metrics/getMetricsController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\metrics\\createMetricsController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Repository } from \"../../entities/repository.entitie\";\r\nimport { Metrics } from \"../../entities/metrics.entitie\";\r\nimport httpStatus from \"http-status\";\r\n\r\nexport class CreateMetricsController implements Controller {\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst { id_repository, coverage, bugs, vulnerabilities, hotspot, code_smells } =\r\n\t\t\t\treq.body;\r\n      console.log(id_repository, coverage, bugs, vulnerabilities, hotspot, code_smells);\r\n\r\n      const data = await Repository.findOneBy({\r\n\t\t\t\tid_repository: id_repository,\r\n\t\t\t});\r\n\t\t\tif (!data) {\r\n\t\t\t\tres.status(httpStatus.NOT_FOUND).json({\r\n\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\tmessage: \"Tribu no encontrada\",\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconst metric = new Metrics();\r\n\t\t\t\tif (\r\n\t\t\t\t\tcoverage !== undefined &&\r\n\t\t\t\t\tcoverage !== null &&\r\n\t\t\t\t\tbugs !== undefined &&\r\n\t\t\t\t\tvulnerabilities !== null &&\r\n\t\t\t\t\thotspot !== null &&\r\n\t\t\t\t\tcode_smells !== null\r\n\t\t\t\t) {\r\n          metric.id_repository = id_repository;\r\n\t\t\t\t\tmetric.coverage = coverage;\r\n          metric.bugs = bugs;\r\n          metric.vulnerabilities = vulnerabilities;\r\n          metric.hotspot = hotspot;\r\n          metric.code_smells = code_smells;\r\n\t\t\t\t\tawait metric.save();\r\n\t\t\t\t\tres.status(httpStatus.CREATED).json({\r\n\t\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\t\tmessage: \"Metrica creada con éxito\",\r\n\t\t\t\t\t\tdata: metric,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al crear la metrica\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\metrics\\getMetricsController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Metrics } from \"../../entities/metrics.entitie\";\r\nimport httpStatus from 'http-status';\r\n\r\nexport class GetMetricsController implements Controller {\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst metrics = await Metrics.find();\r\n\t\t\tres.json({\r\n\t\t\t\tstatus: \"success\",\r\n\t\t\t\tmessage: \"Metricas obtenidas con éxito\",\r\n\t\t\t\tdata: metrics,\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al obtener las metricas\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\routes\\organization.route.ts",{"fileContent":"import { Request, Response, Router } from \"express\";\r\nimport { OrganizationGetController } from \"../controllers/organization/getOrganizationsController\";\r\nimport { OrganizationPutController } from \"../controllers/organization/updateOrganizationController\";\r\nimport { OrganizationDeleteController } from \"../controllers/organization/deleteOrganizationController\";\r\nimport { OrganizationPostController } from \"../controllers/organization/createOrganizationController\";\r\n\r\nexport const register = (router: Router) => {\r\n  const getControlller = new OrganizationGetController();\r\n  const postController = new OrganizationPostController();\r\n  const putController = new OrganizationPutController();\r\n  const deleteController = new OrganizationDeleteController();\r\n\r\n  router.get('/organization', (req:Request, res: Response) => getControlller.run(req, res));\r\n  router.post('/organization/create', (req:Request, res: Response) => postController.run(req, res));\r\n  router.put('/organization/update', (req:Request, res: Response) => putController.run(req, res));\r\n  router.delete('/organization/delete', (req:Request, res: Response) => deleteController.run(req, res));\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/organization/getOrganizationsController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/organization/updateOrganizationController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/organization/deleteOrganizationController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/organization/createOrganizationController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\organization\\getOrganizationsController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Organization } from \"../../entities/organization.entitie\";\r\nimport httpStatus from 'http-status';\r\n\r\nexport class OrganizationGetController implements Controller {\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst organizations = await Organization.find();\r\n\t\t\tres.json({\r\n\t\t\t\tstatus: \"success\",\r\n\t\t\t\tmessage: \"Organizaciones obtenidas con éxito\",\r\n\t\t\t\tdata: organizations,\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al obtener la organización\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\organization\\updateOrganizationController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Organization } from \"../../entities/organization.entitie\";\r\nimport httpStatus from 'http-status';\r\n\r\nexport class OrganizationPutController implements Controller {\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n      const { name, status, id_organization } = req.body;\r\n\r\n      const organization = await Organization.findOneBy({ id_organization: parseInt(id_organization) });\r\n      if (!organization) {\r\n        res.status(httpStatus.NOT_FOUND).json({\r\n          status: \"error\",\r\n          message: \"Organización no encontrada\",\r\n        });\r\n      } else {\r\n        organization.name = name;\r\n        organization.status = status;\r\n        await organization.save();\r\n        res.json({\r\n          status: \"success\",\r\n          message: \"Organización actualizada con éxito\",\r\n          data: organization,\r\n        });\r\n      }\r\n    } catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al obtener la organización\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\organization\\deleteOrganizationController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Organization } from \"../../entities/organization.entitie\";\r\nimport httpStatus from \"http-status\";\r\n\r\nexport class OrganizationDeleteController implements Controller {\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst { id_organization } = req.body;\r\n\t\t\tconst result = await Organization.delete({ id_organization: parseInt(id_organization) });\r\n\t\t\tif (result.affected === 0) {\r\n\t\t\t\tres.status(httpStatus.NOT_FOUND).json({\r\n\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\tmessage: \"Organización no encontrada\",\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconst organizations = await Organization.find();\r\n\t\t\t\tres.json({\r\n\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\tmessage: \"Organización eliminada con éxito\",\r\n\t\t\t\t\tdata: organizations,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al eliminar la organización\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\organization\\createOrganizationController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Organization } from \"../../entities/organization.entitie\";\r\nimport httpStatus from \"http-status\";\r\n\r\nexport class OrganizationPostController implements Controller {\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { name, status } = req.body;\r\n\t\t\tconst organization = new Organization();\r\n\t\t\tif (name.length > 0) {\r\n\t\t\t\torganization.name = name;\r\n\t\t\t\torganization.status = status;\r\n\t\t\t\tawait organization.save();\r\n\t\t\t\tres.status(httpStatus.CREATED).json({\r\n\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\tmessage: \"Organización creada con éxito\",\r\n\t\t\t\t\tdata: organization,\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tres.status(400).json({\r\n\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\tmessage: \"El nombre de la organización es requerido\",\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al obtener la organización\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\routes\\repository.route.ts",{"fileContent":"import { Request, Response, Router } from \"express\";\r\nimport { CreateRepositoryController } from \"../controllers/repository/createRepositoryController\";\r\nimport { GetRepositoriesController } from \"../controllers/repository/getRepositoriesController\";\r\nimport { getRepositoryByIdController } from \"../controllers/repository/getRepositoryByIdController\";\r\n\r\n\r\nexport const register = (router: Router) => {\r\n  const getRepositories = new GetRepositoriesController();\r\n  const createRepository = new CreateRepositoryController();\r\n  const getByIdRepository = new getRepositoryByIdController();\r\n\r\n  router.get('/repository', (req:Request, res: Response) => getRepositories.run(req, res));\r\n  router.get('/repository/:id_tribe', (req:Request, res: Response) => getByIdRepository.run(req, res));\r\n  router.get('/repository/reporte/:id_tribe', (req:Request, res: Response) => getByIdRepository.generateCSV(req, res));\r\n  router.post('/repository', (req:Request, res: Response) => createRepository.run(req, res));\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/repository/createRepositoryController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/repository/getRepositoriesController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/repository/getRepositoryByIdController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\repository\\createRepositoryController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Repository } from \"../../entities/repository.entitie\";\r\nimport { Tribe } from \"../../entities/tribe.entitie\";\r\nimport httpStatus from \"http-status\";\r\n\r\nexport class CreateRepositoryController implements Controller {\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst { id_tribe, name, state, status } = req.body;\r\n\r\n\t\t\tconst data = await Tribe.findOneBy({\r\n\t\t\t\tid_tribe: parseInt(id_tribe),\r\n\t\t\t});\r\n\t\t\tif (!data) {\r\n\t\t\t\tres.status(httpStatus.NOT_FOUND).json({\r\n\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\tmessage: \"Tribu no encontrada\",\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconst repo = new Repository();\r\n\t\t\t\tif (\r\n\t\t\t\t\tname !== undefined &&\r\n\t\t\t\t\tname !== null &&\r\n\t\t\t\t\tstatus !== undefined &&\r\n\t\t\t\t\tstatus !== undefined\r\n\t\t\t\t) {\r\n\t\t\t\t\trepo.id_tribe = id_tribe;\r\n\t\t\t\t\trepo.name = name;\r\n\t\t\t\t\trepo.state = state;\r\n          repo.create_time = new Date();\r\n          repo.status = status;\r\n\t\t\t\t\tawait repo.save();\r\n\t\t\t\t\tres.status(httpStatus.CREATED).json({\r\n\t\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\t\tmessage: \"Repositorio creada con éxito\",\r\n\t\t\t\t\t\tdata: repo,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tres.status(httpStatus.BAD_REQUEST).json({\r\n\t\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\t\tmessage: \"Faltan datos\",\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al crear el repositorio\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\repository\\getRepositoriesController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Repository } from \"../../entities/repository.entitie\";\r\nimport httpStatus from 'http-status';\r\n\r\nexport class GetRepositoriesController implements Controller {\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst repos = await Repository.find();\r\n\t\t\tres.json({\r\n\t\t\t\tstatus: \"success\",\r\n\t\t\t\tmessage: \"Repositorios obtenidas con éxito\",\r\n\t\t\t\tdata: repos,\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al repositorio las tribus\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\repository\\getRepositoryByIdController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Repository } from \"../../entities/repository.entitie\";\r\nimport { Tribe } from \"../../entities/tribe.entitie\";\r\nimport httpStatus from \"http-status\";\r\nimport { Metrics } from \"../../entities/metrics.entitie\";\r\nimport axios from \"axios\";\r\nimport { parseAsync } from \"json2csv\";\r\n\r\nexport class getRepositoryByIdController implements Controller {\r\n\tprivate async getMock() {\r\n\t\tconst mock: string | undefined = process.env.SERVICE_MOCK_URL;\r\n\t\tif (mock) {\r\n\t\t\tconst response = await axios.get(mock);\r\n\t\t\treturn response.data;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tprivate async makeRepositoryData(\r\n\t\t_data: any,\r\n\t\t_coverage: number,\r\n\t\t_repository: Repository\r\n\t) {\r\n\t\tconst mock = await this.getMock();\r\n\t\tconst data = _data;\r\n\t\tif (mock) {\r\n\t\t\t// console.log(JSON.stringify(data));\r\n\t\t\t// console.log(mock.repositories[0].state)\r\n\t\t\tmock.repositories.forEach((repository: any) => {\r\n\t\t\t\tif (repository.id == data.id) {\r\n\t\t\t\t\tdata.verificationState = `${\r\n\t\t\t\t\t\trepository.state === 604\r\n\t\t\t\t\t\t\t? \"Verificado\"\r\n\t\t\t\t\t\t\t: repository.state === 605\r\n\t\t\t\t\t\t\t? \"En espera\"\r\n\t\t\t\t\t\t\t: \"Aprobado\"\r\n\t\t\t\t\t}`;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tconst state = _repository.state.toLocaleLowerCase();\r\n\t\t\tdata.state = `${\r\n\t\t\t\tstate === \"e\" ? \"Habilitado\" : state === \"d\" ? \"Deshabilitado\" : \"Archivado\"\r\n\t\t\t}`;\r\n\t\t\treturn data;\r\n\t\t}\r\n\t}\r\n\tprivate async makeResponse(\r\n\t\tid_repository: number,\r\n\t\tname: string,\r\n\t\tname_tribe: string,\r\n\t\tname_organization: string,\r\n\t\tmetrics: Metrics,\r\n\t\trepo: Repository\r\n\t) {\r\n\t\tconst response = {\r\n\t\t\tid: id_repository,\r\n\t\t\tname: name,\r\n\t\t\ttribe: name_tribe,\r\n\t\t\torganization: name_organization,\r\n\t\t\tcoverage: `${metrics.coverage}%`,\r\n\t\t\tcodeSmells: metrics.code_smells,\r\n\t\t\tbugs: metrics.bugs,\r\n\t\t\tvulnerabilities: metrics.vulnerabilities,\r\n\t\t\thotspots: metrics.hotspot,\r\n\t\t};\r\n\t\tconst nRes = await this.makeRepositoryData(response, metrics.coverage, repo);\r\n\t\treturn nRes as object;\r\n\t}\r\n\r\n\tprivate async makeCSV(data: any) {\r\n\r\n\t\tconst csv: string = await parseAsync(await data, {\r\n\t\t\tdelimiter: \",\",\r\n\t\t\tfields: [\r\n\t\t\t\t{ value: \"id\" },\r\n\t\t\t\t{ value: \"name\" },\r\n\t\t\t\t{ value: \"tribe\" },\r\n\t\t\t\t{ value: \"organization\" },\r\n\t\t\t\t{ value: \"coverage\" },\r\n\t\t\t\t{ value: \"codeSmells\" },\r\n\t\t\t\t{ value: \"bugs\" },\r\n\t\t\t\t{ value: \"vulnerabilities\" },\r\n\t\t\t\t{ value: \"hotspots\" },\r\n\t\t\t\t{ value: \"verificationState\" },\r\n\t\t\t\t{ value: \"state\" },\r\n\t\t\t],\r\n\t\t\tquote: \"\",\r\n\t\t});\r\n    return {\r\n      csv: Buffer.from(csv),\r\n    };\r\n\t}\r\n\tprivate async getRepositoryById(\r\n\t\t_req: Request,\r\n\t\tres: Response,\r\n\t\tid_tribe: number,\r\n\t\tname_tribe: string,\r\n\t\tname_organization: string,\r\n\t\tcs: string\r\n\t): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst repository: Repository[] = await Repository.findBy({\r\n\t\t\t\tid_tribe: id_tribe,\r\n\t\t\t});\r\n\t\t\tif (!repository) {\r\n\t\t\t\tres.status(httpStatus.NOT_FOUND).json({\r\n\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\tmessage: \"Repositorio no encontrado\",\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// eslint-disable-next-line prefer-const\r\n\t\t\t\tlet response: Array<object> = [];\r\n\t\t\t\trepository.forEach(async (rep: Repository, i: number) => {\r\n\t\t\t\t\tresponse.push(\r\n\t\t\t\t\t\tawait this.makeResponse(\r\n\t\t\t\t\t\t\trep.id_repository,\r\n\t\t\t\t\t\t\trep.name,\r\n\t\t\t\t\t\t\tname_tribe,\r\n\t\t\t\t\t\t\tname_organization,\r\n\t\t\t\t\t\t\trep.metrics,\r\n\t\t\t\t\t\t\trep\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (i === repository.length - 1) {\r\n\t\t\t\t\t\tsetTimeout(async () => {\r\n\t\t\t\t\t\t\tif (cs === \"n\") {\r\n\t\t\t\t\t\t\t\tres.status(httpStatus.OK).json({\r\n\t\t\t\t\t\t\t\t\tdata: await response,\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t} else {\r\n                res.header('Content-Type', 'text/csv');\r\n                res.attachment('metrics.csv');\r\n\t\t\t\t\t\t\t\tres.send(await this.makeCSV(response));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al obtener el repositorio\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst tribe = await Tribe.findOneBy({\r\n\t\t\t\tid_tribe: parseInt(req.params.id_tribe),\r\n\t\t\t});\r\n\t\t\tif (!tribe) {\r\n\t\t\t\tres.status(httpStatus.NOT_FOUND).json({\r\n\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\tmessage: \"Tribu no encontrada\",\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.getRepositoryById(\r\n\t\t\t\t\treq,\r\n\t\t\t\t\tres,\r\n\t\t\t\t\tparseInt(req.params.id_tribe),\r\n\t\t\t\t\ttribe.name,\r\n\t\t\t\t\ttribe.id_organization.name,\r\n\t\t\t\t\t\"n\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al repositorio las tribus\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tasync generateCSV(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst tribe = await Tribe.findOneBy({\r\n\t\t\t\tid_tribe: parseInt(req.params.id_tribe),\r\n\t\t\t});\r\n\t\t\tif (!tribe) {\r\n\t\t\t\tres.status(httpStatus.NOT_FOUND).json({\r\n\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\tmessage: \"Tribu no encontrada\",\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tawait this.getRepositoryById(\r\n\t\t\t\t\treq,\r\n\t\t\t\t\tres,\r\n\t\t\t\t\tparseInt(req.params.id_tribe),\r\n\t\t\t\t\ttribe.name,\r\n\t\t\t\t\ttribe.id_organization.name,\r\n\t\t\t\t\t\"s\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al repositorio las tribus\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/metrics.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\routes\\tribe.route.ts",{"fileContent":"import { Request, Response, Router } from \"express\";\r\nimport { CreateTribeController } from \"../controllers/tribe/createTribeController\";\r\nimport { GetTribesController } from \"../controllers/tribe/getTribresController\";\r\n\r\n\r\nexport const register = (router: Router) => {\r\n  const getTribes = new GetTribesController();\r\n  const createTribe = new CreateTribeController();\r\n\r\n  router.get('/tribe', (req:Request, res: Response) => getTribes.run(req, res));\r\n  router.post('/tribe/create', (req:Request, res: Response) => createTribe.run(req, res));\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/tribe/createTribeController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/tribe/getTribresController.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\tribe\\createTribeController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Tribe } from \"../../entities/tribe.entitie\";\r\nimport { Organization } from \"../../entities/organization.entitie\";\r\nimport httpStatus from \"http-status\";\r\n\r\nexport class CreateTribeController implements Controller {\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst { name, status, id_organization } = req.body;\r\n\r\n      console.log(id_organization)\r\n\t\t\tconst data = await Organization.findOneBy({\r\n\t\t\t\tid_organization: parseInt(id_organization),\r\n\t\t\t});\r\n\t\t\tif (!data) {\r\n\t\t\t\tres.status(httpStatus.NOT_FOUND).json({\r\n\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\tmessage: \"Organización no encontrada\",\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconst tribe = new Tribe();\r\n\t\t\t\tif (name !== undefined && name !== null && status !== undefined) {\r\n\t\t\t\t\ttribe.name = name;\r\n\t\t\t\t\ttribe.status = status;\r\n\t\t\t\t\ttribe.id_organization = id_organization;\r\n\t\t\t\t\tawait tribe.save();\r\n\t\t\t\t\tres.status(httpStatus.CREATED).json({\r\n\t\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\t\tmessage: \"Tribu creada con éxito\",\r\n\t\t\t\t\t\tdata: tribe,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al crear la tribus\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts"]}],["C:\\Users\\MEGAPC\\Desktop\\programming\\BryanHerrera_repos_p\\src\\app\\controllers\\tribe\\getTribresController.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { Controller } from \"../Controller\";\r\nimport { Tribe } from \"../../entities/tribe.entitie\";\r\nimport httpStatus from 'http-status';\r\n\r\nexport class GetTribesController implements Controller {\r\n\tasync run(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst tribe = await Tribe.find();\r\n\t\t\tres.json({\r\n\t\t\t\tstatus: \"success\",\r\n\t\t\t\tmessage: \"Tribus obtenidas con éxito\",\r\n\t\t\t\tdata: tribe,\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tres.status(httpStatus.INTERNAL_SERVER_ERROR).json({\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tmessage: \"Error al obtener las tribus\",\r\n\t\t\t\tdata: error,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","resolvedModuleNames":["C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/controllers/Controller.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/tribe.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/organization.entitie.ts","C:/Users/MEGAPC/Desktop/programming/BryanHerrera_repos_p/src/app/entities/repository.entitie.ts"]}]]